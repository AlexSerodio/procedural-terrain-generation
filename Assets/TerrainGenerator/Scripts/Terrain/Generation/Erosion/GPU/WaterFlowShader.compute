#pragma kernel CSMain

#define UP 0
#define DOWN 1
#define LEFT 2
#define RIGHT 3
// #define LEFT_UP 4
// #define RIGHT_UP 5
// #define LEFT_DOWN 6
// #define RIGHT_DOWN 7

#define NEIGHBORHOOD_SIZE 4

RWStructuredBuffer<float> heightmap;
RWStructuredBuffer<float> watermap;

uint width;

uint neighbors[NEIGHBORHOOD_SIZE];

void GetNeighbors(uint currentPosition)
{
	neighbors[UP] = currentPosition - width;
	neighbors[DOWN] = currentPosition + width;
	neighbors[LEFT] = currentPosition - 1;
	neighbors[RIGHT] = currentPosition + 1;
	// neighbors[LEFT_UP] = (currentPosition - 1) - width;
	// neighbors[RIGHT_UP] = (currentPosition + 1) - width;
	// neighbors[LEFT_DOWN] = (currentPosition - 1) + width;
	// neighbors[RIGHT_DOWN] = (currentPosition + 1) + width;
}

int isValidPosition(uint3 id)
{
	return id.x > 1 && id.x < width-1 && 
			id.y > 1 && id.y < width-1;
}

[numthreads(25, 25, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint currentPosition = id.x + (id.y * width);

    if(!isValidPosition(id))
        return;

    GetNeighbors(currentPosition);

    float localSurfaceHeight = watermap[currentPosition];
    float localWaterVolume = localSurfaceHeight - heightmap[currentPosition];

    if (localWaterVolume < 0)
        return;

    float avgSurfaceHeight = 0;
    int countHeights = 0;
    float dTotal = 0;

    for(uint i = 0; i < NEIGHBORHOOD_SIZE; i++)
    {
        float nearbySurfaceHeight = watermap[neighbors[i]];
        float d = localSurfaceHeight - nearbySurfaceHeight;
        
        if (d < 0)
            continue;

        dTotal += d;
        avgSurfaceHeight += nearbySurfaceHeight;
        countHeights++;
    }

    if (dTotal == 0)
        return;

    avgSurfaceHeight /= countHeights;

    float deltaSurfaceHeight = localSurfaceHeight - avgSurfaceHeight;

    float totalDeltaWater = 0;

    for(i = 0; i < NEIGHBORHOOD_SIZE; i++)
    {
        float nearbySurfaceHeight = watermap[neighbors[i]];
        
        if (nearbySurfaceHeight >= localSurfaceHeight) 
            continue;
        
        float d = localSurfaceHeight - nearbySurfaceHeight;
        float deltaWater = min(localWaterVolume, deltaSurfaceHeight) * (d / dTotal);

        watermap[neighbors[i]] += deltaWater;
        totalDeltaWater += deltaWater;
    }

    if (totalDeltaWater > 0)
        watermap[currentPosition] -= totalDeltaWater;
}
